/*
 * Generated by Bluespec Compiler, version 2021.12.1-27-g9a7d5e05 (build 9a7d5e05)
 * 
 * On Wed May 25 20:01:50 IST 2022
 * 
 */
#include "bluesim_primitives.h"
#include "mkButterfly.h"


/* Constructor */
MOD_mkButterfly::MOD_mkButterfly(tSimStateHdl simHdl, char const *name, Module *parent)
  : Module(simHdl, name, parent),
    __clk_handle_0(BAD_CLOCK_HANDLE),
    INST_d(simHdl, "d", this, 32u, 0u, (tUInt8)0u),
    INST_rflag(simHdl, "rflag", this, 1u, (tUInt8)0u, (tUInt8)0u),
    INST_s(simHdl, "s", this, 32u, 0u, (tUInt8)0u),
    PORT_RST_N((tUInt8)1u)
{
  symbol_count = 4u;
  symbols = new tSym[symbol_count];
  init_symbols_0();
}


/* Symbol init fns */

void MOD_mkButterfly::init_symbols_0()
{
  init_symbol(&symbols[0u], "d", SYM_MODULE, &INST_d);
  init_symbol(&symbols[1u], "rflag", SYM_MODULE, &INST_rflag);
  init_symbol(&symbols[2u], "rflag__h239", SYM_DEF, &DEF_rflag__h239, 1u);
  init_symbol(&symbols[3u], "s", SYM_MODULE, &INST_s);
}


/* Rule actions */


/* Methods */

void MOD_mkButterfly::METH_butterfly(tUInt32 ARG_butterfly_x, tUInt32 ARG_butterfly_y)
{
  tUInt32 DEF_butterfly_x_PLUS_butterfly_y___d1;
  tUInt32 DEF_butterfly_x_MINUS_butterfly_y___d2;
  DEF_butterfly_x_MINUS_butterfly_y___d2 = ARG_butterfly_x - ARG_butterfly_y;
  DEF_butterfly_x_PLUS_butterfly_y___d1 = ARG_butterfly_x + ARG_butterfly_y;
  INST_s.METH_write(DEF_butterfly_x_PLUS_butterfly_y___d1);
  INST_d.METH_write(DEF_butterfly_x_MINUS_butterfly_y___d2);
  INST_rflag.METH_write((tUInt8)1u);
}

tUInt8 MOD_mkButterfly::METH_RDY_butterfly()
{
  tUInt8 DEF_CAN_FIRE_butterfly;
  tUInt8 PORT_RDY_butterfly;
  DEF_CAN_FIRE_butterfly = (tUInt8)1u;
  PORT_RDY_butterfly = DEF_CAN_FIRE_butterfly;
  return PORT_RDY_butterfly;
}

tUInt32 MOD_mkButterfly::METH_sum()
{
  tUInt32 PORT_sum;
  PORT_sum = INST_s.METH_read();
  return PORT_sum;
}

tUInt8 MOD_mkButterfly::METH_RDY_sum()
{
  tUInt8 DEF_CAN_FIRE_sum;
  tUInt8 PORT_RDY_sum;
  DEF_rflag__h239 = INST_rflag.METH_read();
  DEF_CAN_FIRE_sum = DEF_rflag__h239;
  PORT_RDY_sum = DEF_CAN_FIRE_sum;
  return PORT_RDY_sum;
}

tUInt32 MOD_mkButterfly::METH_diff()
{
  tUInt32 PORT_diff;
  PORT_diff = INST_d.METH_read();
  return PORT_diff;
}

tUInt8 MOD_mkButterfly::METH_RDY_diff()
{
  tUInt8 DEF_CAN_FIRE_diff;
  tUInt8 PORT_RDY_diff;
  DEF_rflag__h239 = INST_rflag.METH_read();
  DEF_CAN_FIRE_diff = DEF_rflag__h239;
  PORT_RDY_diff = DEF_CAN_FIRE_diff;
  return PORT_RDY_diff;
}


/* Reset routines */

void MOD_mkButterfly::reset_RST_N(tUInt8 ARG_rst_in)
{
  PORT_RST_N = ARG_rst_in;
  INST_s.reset_RST(ARG_rst_in);
  INST_rflag.reset_RST(ARG_rst_in);
  INST_d.reset_RST(ARG_rst_in);
}


/* Static handles to reset routines */


/* Functions for the parent module to register its reset fns */


/* Functions to set the elaborated clock id */

void MOD_mkButterfly::set_clk_0(char const *s)
{
  __clk_handle_0 = bk_get_or_define_clock(sim_hdl, s);
}


/* State dumping routine */
void MOD_mkButterfly::dump_state(unsigned int indent)
{
  printf("%*s%s:\n", indent, "", inst_name);
  INST_d.dump_state(indent + 2u);
  INST_rflag.dump_state(indent + 2u);
  INST_s.dump_state(indent + 2u);
}


/* VCD dumping routines */

unsigned int MOD_mkButterfly::dump_VCD_defs(unsigned int levels)
{
  vcd_write_scope_start(sim_hdl, inst_name);
  vcd_num = vcd_reserve_ids(sim_hdl, 5u);
  unsigned int num = vcd_num;
  for (unsigned int clk = 0u; clk < bk_num_clocks(sim_hdl); ++clk)
    vcd_add_clock_def(sim_hdl, this, bk_clock_name(sim_hdl, clk), bk_clock_vcd_num(sim_hdl, clk));
  vcd_write_def(sim_hdl, bk_clock_vcd_num(sim_hdl, __clk_handle_0), "CLK", 1u);
  vcd_write_def(sim_hdl, num++, "RST_N", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "rflag__h239", 1u);
  num = INST_d.dump_VCD_defs(num);
  num = INST_rflag.dump_VCD_defs(num);
  num = INST_s.dump_VCD_defs(num);
  vcd_write_scope_end(sim_hdl);
  return num;
}

void MOD_mkButterfly::dump_VCD(tVCDDumpType dt, unsigned int levels, MOD_mkButterfly &backing)
{
  vcd_defs(dt, backing);
  vcd_prims(dt, backing);
}

void MOD_mkButterfly::vcd_defs(tVCDDumpType dt, MOD_mkButterfly &backing)
{
  unsigned int num = vcd_num;
  if (dt == VCD_DUMP_XS)
  {
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
  }
  else
    if (dt == VCD_DUMP_CHANGES)
    {
      if ((backing.PORT_RST_N) != PORT_RST_N)
      {
	vcd_write_val(sim_hdl, num, PORT_RST_N, 1u);
	backing.PORT_RST_N = PORT_RST_N;
      }
      ++num;
      if ((backing.DEF_rflag__h239) != DEF_rflag__h239)
      {
	vcd_write_val(sim_hdl, num, DEF_rflag__h239, 1u);
	backing.DEF_rflag__h239 = DEF_rflag__h239;
      }
      ++num;
    }
    else
    {
      vcd_write_val(sim_hdl, num++, PORT_RST_N, 1u);
      backing.PORT_RST_N = PORT_RST_N;
      vcd_write_val(sim_hdl, num++, DEF_rflag__h239, 1u);
      backing.DEF_rflag__h239 = DEF_rflag__h239;
    }
}

void MOD_mkButterfly::vcd_prims(tVCDDumpType dt, MOD_mkButterfly &backing)
{
  INST_d.dump_VCD(dt, backing.INST_d);
  INST_rflag.dump_VCD(dt, backing.INST_rflag);
  INST_s.dump_VCD(dt, backing.INST_s);
}

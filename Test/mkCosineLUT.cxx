/*
 * Generated by Bluespec Compiler, version 2021.12.1-27-g9a7d5e05 (build 9a7d5e05)
 * 
 * On Wed May 25 20:01:50 IST 2022
 * 
 */
#include "bluesim_primitives.h"
#include "mkCosineLUT.h"


/* Constructor */
MOD_mkCosineLUT::MOD_mkCosineLUT(tSimStateHdl simHdl, char const *name, Module *parent)
  : Module(simHdl, name, parent), __clk_handle_0(BAD_CLOCK_HANDLE), PORT_RST_N((tUInt8)1u)
{
  symbol_count = 0u;
  init_symbols_0();
}


/* Symbol init fns */

void MOD_mkCosineLUT::init_symbols_0()
{
}


/* Rule actions */


/* Methods */

tUInt64 MOD_mkCosineLUT::METH_cs(tUInt32 ARG_cs_n)
{
  tUInt32 DEF_IF_cs_n_EQ_0_THEN_256_ELSE_IF_cs_n_EQ_1_THEN_2_ETC___d18;
  tUInt32 DEF_IF_8_MINUS_cs_n_9_EQ_0_0_THEN_256_ELSE_IF_8_MI_ETC___d37;
  tUInt64 PORT_cs;
  switch (8u - ARG_cs_n) {
  case 0u:
    DEF_IF_8_MINUS_cs_n_9_EQ_0_0_THEN_256_ELSE_IF_8_MI_ETC___d37 = 256u;
    break;
  case 1u:
    DEF_IF_8_MINUS_cs_n_9_EQ_0_0_THEN_256_ELSE_IF_8_MI_ETC___d37 = 251u;
    break;
  case 2u:
    DEF_IF_8_MINUS_cs_n_9_EQ_0_0_THEN_256_ELSE_IF_8_MI_ETC___d37 = 237u;
    break;
  case 3u:
    DEF_IF_8_MINUS_cs_n_9_EQ_0_0_THEN_256_ELSE_IF_8_MI_ETC___d37 = 213u;
    break;
  case 4u:
    DEF_IF_8_MINUS_cs_n_9_EQ_0_0_THEN_256_ELSE_IF_8_MI_ETC___d37 = 181u;
    break;
  case 5u:
    DEF_IF_8_MINUS_cs_n_9_EQ_0_0_THEN_256_ELSE_IF_8_MI_ETC___d37 = 142u;
    break;
  case 6u:
    DEF_IF_8_MINUS_cs_n_9_EQ_0_0_THEN_256_ELSE_IF_8_MI_ETC___d37 = 98u;
    break;
  case 7u:
    DEF_IF_8_MINUS_cs_n_9_EQ_0_0_THEN_256_ELSE_IF_8_MI_ETC___d37 = 50u;
    break;
  default:
    DEF_IF_8_MINUS_cs_n_9_EQ_0_0_THEN_256_ELSE_IF_8_MI_ETC___d37 = 0u;
  }
  switch (ARG_cs_n) {
  case 0u:
    DEF_IF_cs_n_EQ_0_THEN_256_ELSE_IF_cs_n_EQ_1_THEN_2_ETC___d18 = 256u;
    break;
  case 1u:
    DEF_IF_cs_n_EQ_0_THEN_256_ELSE_IF_cs_n_EQ_1_THEN_2_ETC___d18 = 251u;
    break;
  case 2u:
    DEF_IF_cs_n_EQ_0_THEN_256_ELSE_IF_cs_n_EQ_1_THEN_2_ETC___d18 = 237u;
    break;
  case 3u:
    DEF_IF_cs_n_EQ_0_THEN_256_ELSE_IF_cs_n_EQ_1_THEN_2_ETC___d18 = 213u;
    break;
  case 4u:
    DEF_IF_cs_n_EQ_0_THEN_256_ELSE_IF_cs_n_EQ_1_THEN_2_ETC___d18 = 181u;
    break;
  case 5u:
    DEF_IF_cs_n_EQ_0_THEN_256_ELSE_IF_cs_n_EQ_1_THEN_2_ETC___d18 = 142u;
    break;
  case 6u:
    DEF_IF_cs_n_EQ_0_THEN_256_ELSE_IF_cs_n_EQ_1_THEN_2_ETC___d18 = 98u;
    break;
  case 7u:
    DEF_IF_cs_n_EQ_0_THEN_256_ELSE_IF_cs_n_EQ_1_THEN_2_ETC___d18 = 50u;
    break;
  default:
    DEF_IF_cs_n_EQ_0_THEN_256_ELSE_IF_cs_n_EQ_1_THEN_2_ETC___d18 = 0u;
  }
  PORT_cs = (((tUInt64)(DEF_IF_cs_n_EQ_0_THEN_256_ELSE_IF_cs_n_EQ_1_THEN_2_ETC___d18)) << 32u) | (tUInt64)(DEF_IF_8_MINUS_cs_n_9_EQ_0_0_THEN_256_ELSE_IF_8_MI_ETC___d37);
  return PORT_cs;
}

tUInt8 MOD_mkCosineLUT::METH_RDY_cs()
{
  tUInt8 DEF_CAN_FIRE_cs;
  tUInt8 PORT_RDY_cs;
  DEF_CAN_FIRE_cs = (tUInt8)1u;
  PORT_RDY_cs = DEF_CAN_FIRE_cs;
  return PORT_RDY_cs;
}


/* Reset routines */

void MOD_mkCosineLUT::reset_RST_N(tUInt8 ARG_rst_in)
{
  PORT_RST_N = ARG_rst_in;
}


/* Static handles to reset routines */


/* Functions for the parent module to register its reset fns */


/* Functions to set the elaborated clock id */

void MOD_mkCosineLUT::set_clk_0(char const *s)
{
  __clk_handle_0 = bk_get_or_define_clock(sim_hdl, s);
}


/* State dumping routine */
void MOD_mkCosineLUT::dump_state(unsigned int indent)
{
}


/* VCD dumping routines */

unsigned int MOD_mkCosineLUT::dump_VCD_defs(unsigned int levels)
{
  vcd_write_scope_start(sim_hdl, inst_name);
  vcd_num = vcd_reserve_ids(sim_hdl, 1u);
  unsigned int num = vcd_num;
  for (unsigned int clk = 0u; clk < bk_num_clocks(sim_hdl); ++clk)
    vcd_add_clock_def(sim_hdl, this, bk_clock_name(sim_hdl, clk), bk_clock_vcd_num(sim_hdl, clk));
  vcd_write_def(sim_hdl, bk_clock_vcd_num(sim_hdl, __clk_handle_0), "CLK", 1u);
  vcd_write_def(sim_hdl, num++, "RST_N", 1u);
  vcd_write_scope_end(sim_hdl);
  return num;
}

void MOD_mkCosineLUT::dump_VCD(tVCDDumpType dt, unsigned int levels, MOD_mkCosineLUT &backing)
{
  vcd_defs(dt, backing);
}

void MOD_mkCosineLUT::vcd_defs(tVCDDumpType dt, MOD_mkCosineLUT &backing)
{
  unsigned int num = vcd_num;
  if (dt == VCD_DUMP_XS)
  {
    vcd_write_x(sim_hdl, num++, 1u);
  }
  else
    if (dt == VCD_DUMP_CHANGES)
    {
      if ((backing.PORT_RST_N) != PORT_RST_N)
      {
	vcd_write_val(sim_hdl, num, PORT_RST_N, 1u);
	backing.PORT_RST_N = PORT_RST_N;
      }
      ++num;
    }
    else
    {
      vcd_write_val(sim_hdl, num++, PORT_RST_N, 1u);
      backing.PORT_RST_N = PORT_RST_N;
    }
}
